/**
 *  Laboratorio # 9 --- Experimento # 2
 *  Carlos Andrés Letona 18082
 *  Timers -- UART -- Interrupciones
 */

#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/systick.h"
#include "driverlib/uart.h"


uint32_t tiempo = 0;
uint32_t dato = 0x52;
bool c = 0;

int main(void){

    SysCtlClockSet(SYSCTL_XTAL_16MHZ|SYSCTL_SYSDIV_5); //RELOJ DE 40MHZ

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);//ACTIVO ESTE PERIFERICO

    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);// LOS LEDS COMO SALIDA

    //***********************************************************************************************************************************
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0); //HABILITO EL RELOJ EN ESTE TIMER

    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);//DIGO QUE LA BASE ES EL TIMER0 Y QUE SERÁ PERIODICO
    TimerLoadSet(TIMER0_BASE, TIMER_A, 20000000-1);//MEDIO CICLO
    //SI USO LOS 32 BITS, SIEMPRE HAGO REFERENCIA AL TIMER_A
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);//DIGO QUE HAY INTERRUPCION CON EL TIMOUT DEL TIMER 0
    IntEnable(INT_TIMER0A);//HABILITO LA INTERRUPCION DEL TIMER
    IntMasterEnable();//TODAS LAS INTERRUPCIONES HABILITADAS


    TimerEnable(TIMER0_BASE, TIMER_A);//DESPUES DE CONFIGURADO, LO HABILITO
//***********************************************************************************************************************************
//***********************************************************************************************************************************
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0); //HABILITO QUE USARÉ EL UART0
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); //HABILITO EL PUERTO DONDE ESTA EL TX Y RX
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 |GPIO_PIN_1);//DEFINO LOS PINES
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200, (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE));
    //LA CONFIGURACION DEL UART

//***********************************************************************************************************************************
    while(1){
        dato = UARTCharGet(UART0_BASE);
        UARTCharPut(UART0_BASE, dato);
    }

}
void Timer0IntHandler(void){
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
        if (c==0){
            if (dato == 0x52){//SI MANDO ROJO
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0xff);
            }
            if (dato == 0x41){//SI MANDO AZUL
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0xff);
            }
            if (dato == 0x56){//SI MANDO VERDE
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0xff);
            }
        c = 1;
        }else{
            if (dato == 0x52){//SI MANDO ROJO
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x00);
            }
            if (dato == 0x41){//SI MANDO AZUL
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0x00);
            }
            if (dato == 0x56){//SI MANDO VERDE
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x00);
            }
         c = 0;
            }
}
